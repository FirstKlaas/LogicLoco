.namespace PLAYER {

    .const PLAYER_BLOCK = $40

    JumpAndFallTable:
        .byte $04, $04, $03, $03, $01, $01
    __JumpAndFallTable:

    .const STATE_JUMP       = %00000001
    .const STATE_FALL       = %00000010
 
    .const COLLISION_SOLID  = %00010000
    .const COLLISION_FLOOR  = %00100000
    .const COLLISION_LADDER = %01000000


    .const JOY_UP           = %00001
    .const JOY_DN           = %00010
    .const JOY_LT           = %00100
    .const JOY_RT           = %01000

    Init: {
            lda SPRITEACTIV
            ora #%00000001
            sta SPRITEACTIV
            lda #70
            sta SPRITE0X
            sta SPRITE0Y
            lda #COLOR_GREEN
            lda #PLAYER_BLOCK
            sta SPRITEPOINTERS
            lda SPRITEMULTICOLOR
            ora #1
            sta SPRITEMULTICOLOR
            lda #COLOR_PINK
            sta SPRITEMULTICOLOR0
            lda #COLOR_WHITE
            sta SPRITEMULTICOLOR1
            lda #COLOR_PURPLE
            sta SPRITE0COLOR
            
            rts
    }

    .label JOYSTICK_PORT2   = $dc00

    Control: {
            lda JOYSTICK_PORT2  
            sta zpJoystick2State
        !JoyUp:
            and #[JOY_UP]
            bne !JoyDown+
            lda zpPlayerState
            and #[STATE_JUMP + STATE_FALL] // If we already fall or jump, we can skip 
            bne !JoyLeft+

            lda zpPlayerState
            ora #STATE_JUMP 
            sta zpPlayerState 
            lda #$00
            sta zpPlayerJumpIndex
            jmp !JoyLeft+           // If we move up, we cannot move down at the same time
        !JoyDown:
            lda zpJoystick2State
            and #[JOY_DN]
            bne !JoyLeft+
        !JoyLeft:
            lda zpJoystick2State
            and #[JOY_LT]
            bne !JoyRight+
            ldx zpPlayerX
            dex          
            stx zpPlayerX
            jmp !Exit+              // If we move left, we cannot move right at the same time

        !JoyRight:
            lda zpJoystick2State
            and #[JOY_RT]
            bne !Exit+
            ldx zpPlayerX
            inx          
            stx zpPlayerX
        !Exit:
            rts
    }

    Update: {
            lda zpPlayerX
            clc
            rol
            sta SPRITE0X 
            bcc !+
            lda SPRITESMAXX
            ora #1
            sta SPRITESMAXX
            jmp !doy+
        !:
            lda SPRITESMAXX
            and #%11111110
            sta SPRITESMAXX
        !doy:
            lda zpPlayerY
            sta SPRITE0Y
            rts
    }

    GetCollisions: {
            // Check left foot
            ldx #1
            ldy #20
            jsr PLAYER.GetScreenPosition
            jsr UTIL.GetCharacterAt
            tax
            lda CHAR_COLORS,x
            sta zpPlayerFloorCollision

            // Check right foot
            ldx #5
            ldy #20
            jsr PLAYER.GetScreenPosition
            jsr UTIL.GetCharacterAt
            tax
            lda CHAR_COLORS,x
            ora zpPlayerFloorCollision
            and #$f0
            sta zpPlayerFloorCollision
            rts
    }

    GetScreenPosition: {
        .const XBorderOffset = 10
        .const YBorderOffset = 50

        .label xPixelOffset = zpTemp00 
        .label yPixelOffset = zpTemp01
            
            stx xPixelOffset
            sty yPixelOffset
            
            lda zpPlayerX
            cmp #XBorderOffset
            bcs !+
            lda #XBorderOffset
        !:
            clc 
            adc xPixelOffset
            sec 
            sbc #XBorderOffset
            lsr 
            lsr
            tax

            lda zpPlayerY
            cmp #YBorderOffset
            bcs !+
            lda #YBorderOffset
        !:
            clc 
            adc yPixelOffset
            sec
            sbc #YBorderOffset
            lsr 
            lsr 
            lsr 
            tay
            rts
    }

    JumpAndFall: {
        !JumpStateCheck:                 // Are we jumping?
            lda zpPlayerState
            and #STATE_JUMP 
            bne !ExitFallingCheck+  // Yes, so we cannot fall.

        !CheckFalling:
            lda zpPlayerFloorCollision
            and #COLLISION_FLOOR
            bne !NotFalling+
        !Falling:
            lda zpPlayerState
            and #STATE_FALL         // Are we already falling?
            bne !ExitJumpCheck+
            lda zpPlayerState
            ora #STATE_FALL
            sta zpPlayerState

            lda #[__JumpAndFallTable - JumpAndFallTable - 1 ]
            sta zpPlayerJumpIndex
            jmp !ExitJumpCheck+

        !NotFalling:
            lda zpPlayerState
            and #[$ff - STATE_FALL]
            sta zpPlayerState

        !ExitFallingCheck:

        !JumpCheck:
            lda zpPlayerState
            and #STATE_JUMP 
            beq !ExitJumpCheck+
            nop


        !ExitJumpCheck:

        !ApplyFallOrJump:

        !TestApplyFall:
            lda zpPlayerState
            and #[STATE_FALL]
            beq !Skip+

        !ApplyFall:
            ldx zpPlayerJumpIndex
            lda zpPlayerState
            and #STATE_FALL
            beq !Skip+
            lda JumpAndFallTable, x
            clc
            adc zpPlayerY
            sta zpPlayerY

            // Update JumpIndex
            dex 
            bpl !+
            ldx #0
        !:
            stx zpPlayerJumpIndex
        !Skip:

        !TestApplyJump:
            lda zpPlayerState
            and #STATE_JUMP
            beq !Skip+ 
        !ApplyJump:
            ldx zpPlayerJumpIndex
            lda zpPlayerY 
            sec
            sbc JumpAndFallTable, x
            sta zpPlayerY

            // Update JumpIndex
            inx
.break
            cpx #[__JumpAndFallTable - JumpAndFallTable ]

            bne !+
            dex
            lda zpPlayerState
            and #[$ff - STATE_JUMP]
            sta zpPlayerState 
        !:



        !Skip:
            rts
    }
}
